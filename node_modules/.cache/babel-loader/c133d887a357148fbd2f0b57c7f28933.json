{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { FLUSH, PAUSE, PERSIST, PURGE, REHYDRATE, DEFAULT_VERSION } from './constants';\nimport autoMergeLevel1 from './stateReconciler/autoMergeLevel1';\nimport createPersistoid from './createPersistoid';\nimport defaultGetStoredState from './getStoredState';\nimport purgeStoredState from './purgeStoredState';\nconst DEFAULT_TIMEOUT = 5000;\n/*\n  @TODO add validation / handling for:\n  - persisting a reducer which has nested _persist\n  - handling actions that fire before reydrate is called\n*/\n\nexport default function persistReducer(config, baseReducer) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!config) throw new Error('config is required for persistReducer');\n    if (!config.key) throw new Error('key is required in persistor config');\n    if (!config.storage) throw new Error(\"reduxjs-toolkit-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'reduxjs-toolkit-persist/lib/storage'`\");\n  }\n\n  const version = config.version !== undefined ? config.version : DEFAULT_VERSION;\n  const stateReconciler = config.stateReconciler === undefined ? autoMergeLevel1 : config.stateReconciler;\n  const getStoredState = config.getStoredState || defaultGetStoredState;\n  const timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;\n  let _persistoid = null;\n  let _purge = false;\n  let _paused = true;\n\n  const conditionalUpdate = state => {\n    // update the persistoid only if we are rehydrated and not paused\n    state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);\n    return state;\n  };\n\n  return (state, action) => {\n    const _a = state || {},\n          {\n      _persist\n    } = _a,\n          rest = __rest(_a, [\"_persist\"]);\n\n    const restState = rest;\n\n    if (action.type === PERSIST) {\n      let _sealed = false;\n\n      const _rehydrate = (payload, err) => {\n        // dev warning if we are already sealed\n        if (process.env.NODE_ENV !== 'production' && _sealed) console.error(`reduxjs-toolkit-persist: rehydrate for \"${config.key}\" called after timeout.`, payload, err); // only rehydrate if we are not already sealed\n\n        if (!_sealed) {\n          action.rehydrate(config.key, payload, err);\n          _sealed = true;\n        }\n      };\n\n      timeout && setTimeout(() => {\n        !_sealed && _rehydrate(undefined, new Error(`reduxjs-toolkit-persist: persist timed out for persist key \"${config.key}\"`));\n      }, timeout); // @NOTE PERSIST resumes if paused.\n\n      _paused = false; // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set\n\n      if (!_persistoid) _persistoid = createPersistoid(config); // @NOTE PERSIST can be called multiple times, noop after the first\n\n      if (_persist) {\n        // We still need to call the base reducer because there might be nested\n        // uses of persistReducer which need to be aware of the PERSIST action\n        return Object.assign(Object.assign({}, baseReducer(restState, action)), {\n          _persist\n        });\n      }\n\n      if (typeof action.rehydrate !== 'function' || typeof action.register !== 'function') throw new Error('reduxjs-toolkit-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');\n      action.register(config.key);\n      getStoredState(config).then(restoredState => {\n        if (restoredState) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const migrate = config.migrate || ((s, _) => Promise.resolve(s));\n\n          migrate(restoredState, version).then(migratedState => {\n            _rehydrate(migratedState);\n          }, migrateErr => {\n            if (process.env.NODE_ENV !== 'production' && migrateErr) console.error('redux-toolkit-persist: migration error', migrateErr);\n\n            _rehydrate(undefined, migrateErr);\n          });\n        }\n      }, err => {\n        _rehydrate(undefined, err);\n      });\n      return Object.assign(Object.assign({}, baseReducer(restState, action)), {\n        _persist: {\n          version,\n          rehydrated: false\n        }\n      });\n    } else if (action.type === PURGE) {\n      _purge = true;\n      action.result(purgeStoredState(config));\n      return Object.assign(Object.assign({}, baseReducer(restState, action)), {\n        _persist\n      });\n    } else if (action.type === FLUSH) {\n      action.result(_persistoid && _persistoid.flush());\n      return Object.assign(Object.assign({}, baseReducer(restState, action)), {\n        _persist\n      });\n    } else if (action.type === PAUSE) {\n      _paused = true;\n    } else if (action.type === REHYDRATE) {\n      // noop on restState if purging\n      if (_purge) return Object.assign(Object.assign({}, restState), {\n        _persist: Object.assign(Object.assign({}, _persist), {\n          rehydrated: true\n        })\n      }); // @NOTE if key does not match, will continue to default else below\n\n      if (action.key === config.key) {\n        const reducedState = baseReducer(restState, action);\n        const inboundState = action.payload; // only reconcile state if stateReconciler and inboundState are both defined\n\n        const reconciledRest = stateReconciler !== false && inboundState !== undefined ? stateReconciler(inboundState, state, reducedState, config) : reducedState;\n        const newState = Object.assign(Object.assign({}, reconciledRest), {\n          _persist: Object.assign(Object.assign({}, _persist), {\n            rehydrated: true\n          })\n        });\n        return conditionalUpdate(newState);\n      }\n    } // if we have not already handled PERSIST, straight passthrough\n\n\n    if (!_persist) return baseReducer(state, action); // run base reducer:\n    // is state modified ? return original : return updated\n\n    const newState = baseReducer(restState, action);\n    if (newState === restState) return state;\n    return conditionalUpdate(Object.assign(Object.assign({}, newState), {\n      _persist\n    }));\n  };\n}","map":{"version":3,"sources":["/home/wv/Desktop/GitRepos/Ecommerce/React-Redux-E_commerce/node_modules/reduxjs-toolkit-persist/es/persistReducer.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","FLUSH","PAUSE","PERSIST","PURGE","REHYDRATE","DEFAULT_VERSION","autoMergeLevel1","createPersistoid","defaultGetStoredState","purgeStoredState","DEFAULT_TIMEOUT","persistReducer","config","baseReducer","process","env","NODE_ENV","Error","key","storage","version","undefined","stateReconciler","getStoredState","timeout","_persistoid","_purge","_paused","conditionalUpdate","state","_persist","rehydrated","update","action","_a","rest","restState","type","_sealed","_rehydrate","payload","err","console","error","rehydrate","setTimeout","assign","register","then","restoredState","migrate","_","Promise","resolve","migratedState","migrateErr","result","flush","reducedState","inboundState","reconciledRest","newState"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { FLUSH, PAUSE, PERSIST, PURGE, REHYDRATE, DEFAULT_VERSION, } from './constants';\nimport autoMergeLevel1 from './stateReconciler/autoMergeLevel1';\nimport createPersistoid from './createPersistoid';\nimport defaultGetStoredState from './getStoredState';\nimport purgeStoredState from './purgeStoredState';\nconst DEFAULT_TIMEOUT = 5000;\n/*\n  @TODO add validation / handling for:\n  - persisting a reducer which has nested _persist\n  - handling actions that fire before reydrate is called\n*/\nexport default function persistReducer(config, baseReducer) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!config)\n            throw new Error('config is required for persistReducer');\n        if (!config.key)\n            throw new Error('key is required in persistor config');\n        if (!config.storage)\n            throw new Error(\"reduxjs-toolkit-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'reduxjs-toolkit-persist/lib/storage'`\");\n    }\n    const version = config.version !== undefined ? config.version : DEFAULT_VERSION;\n    const stateReconciler = config.stateReconciler === undefined\n        ? autoMergeLevel1\n        : config.stateReconciler;\n    const getStoredState = config.getStoredState || defaultGetStoredState;\n    const timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;\n    let _persistoid = null;\n    let _purge = false;\n    let _paused = true;\n    const conditionalUpdate = (state) => {\n        // update the persistoid only if we are rehydrated and not paused\n        state._persist.rehydrated &&\n            _persistoid &&\n            !_paused &&\n            _persistoid.update(state);\n        return state;\n    };\n    return (state, action) => {\n        const _a = state || {}, { _persist } = _a, rest = __rest(_a, [\"_persist\"]);\n        const restState = rest;\n        if (action.type === PERSIST) {\n            let _sealed = false;\n            const _rehydrate = (payload, err) => {\n                // dev warning if we are already sealed\n                if (process.env.NODE_ENV !== 'production' && _sealed)\n                    console.error(`reduxjs-toolkit-persist: rehydrate for \"${config.key}\" called after timeout.`, payload, err);\n                // only rehydrate if we are not already sealed\n                if (!_sealed) {\n                    action.rehydrate(config.key, payload, err);\n                    _sealed = true;\n                }\n            };\n            timeout &&\n                setTimeout(() => {\n                    !_sealed &&\n                        _rehydrate(undefined, new Error(`reduxjs-toolkit-persist: persist timed out for persist key \"${config.key}\"`));\n                }, timeout);\n            // @NOTE PERSIST resumes if paused.\n            _paused = false;\n            // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set\n            if (!_persistoid)\n                _persistoid = createPersistoid(config);\n            // @NOTE PERSIST can be called multiple times, noop after the first\n            if (_persist) {\n                // We still need to call the base reducer because there might be nested\n                // uses of persistReducer which need to be aware of the PERSIST action\n                return Object.assign(Object.assign({}, baseReducer(restState, action)), { _persist });\n            }\n            if (typeof action.rehydrate !== 'function' ||\n                typeof action.register !== 'function')\n                throw new Error('reduxjs-toolkit-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');\n            action.register(config.key);\n            getStoredState(config).then(restoredState => {\n                if (restoredState) {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const migrate = config.migrate || ((s, _) => Promise.resolve(s));\n                    migrate(restoredState, version).then(migratedState => {\n                        _rehydrate(migratedState);\n                    }, migrateErr => {\n                        if (process.env.NODE_ENV !== 'production' && migrateErr)\n                            console.error('redux-toolkit-persist: migration error', migrateErr);\n                        _rehydrate(undefined, migrateErr);\n                    });\n                }\n            }, err => {\n                _rehydrate(undefined, err);\n            });\n            return Object.assign(Object.assign({}, baseReducer(restState, action)), { _persist: { version, rehydrated: false } });\n        }\n        else if (action.type === PURGE) {\n            _purge = true;\n            action.result(purgeStoredState(config));\n            return Object.assign(Object.assign({}, baseReducer(restState, action)), { _persist });\n        }\n        else if (action.type === FLUSH) {\n            action.result(_persistoid && _persistoid.flush());\n            return Object.assign(Object.assign({}, baseReducer(restState, action)), { _persist });\n        }\n        else if (action.type === PAUSE) {\n            _paused = true;\n        }\n        else if (action.type === REHYDRATE) {\n            // noop on restState if purging\n            if (_purge)\n                return Object.assign(Object.assign({}, restState), { _persist: Object.assign(Object.assign({}, _persist), { rehydrated: true }) });\n            // @NOTE if key does not match, will continue to default else below\n            if (action.key === config.key) {\n                const reducedState = baseReducer(restState, action);\n                const inboundState = action.payload;\n                // only reconcile state if stateReconciler and inboundState are both defined\n                const reconciledRest = stateReconciler !== false && inboundState !== undefined\n                    ? stateReconciler(inboundState, state, reducedState, config)\n                    : reducedState;\n                const newState = Object.assign(Object.assign({}, reconciledRest), { _persist: Object.assign(Object.assign({}, _persist), { rehydrated: true }) });\n                return conditionalUpdate(newState);\n            }\n        }\n        // if we have not already handled PERSIST, straight passthrough\n        if (!_persist)\n            return baseReducer(state, action);\n        // run base reducer:\n        // is state modified ? return original : return updated\n        const newState = baseReducer(restState, action);\n        if (newState === restState)\n            return state;\n        return conditionalUpdate(Object.assign(Object.assign({}, newState), { _persist }));\n    };\n}\n"]},"metadata":{},"sourceType":"module"}