{"ast":null,"code":"import OrderHistory from \"../../../Component/OrderHistory\";\nconst cart = [];\n\nconst handleCart = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : cart;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const product = action.payload;\n\n  switch (action.type) {\n    case \"ADDITEM\":\n      const exist = state.find(x => x.id === product.id);\n\n      if (exist) {\n        return state.map(x => x.id === product.id ? { ...x,\n          qty: x.qty + 1\n        } : x);\n      } else {\n        const product = action.payload;\n        return [...state, { ...product,\n          qty: 1\n        }];\n      }\n\n      break;\n\n    case \"DELITEM\":\n      const exit1 = state.find(x => x.id === product.id);\n\n      if (exit1.qty === 1) {\n        return state.filter(x => x.id !== exit1.id);\n      } else {\n        return state.map(x => x.id === product.id ? { ...x,\n          qty: x.qty - 1\n        } : x);\n      }\n\n      break;\n\n    case \"CARTDATADELETE\":\n      const exit2 = state.find(x => x.id === product.id);\n\n      if (exit2) {\n        return state.filter(x => x.id !== exit2.id);\n      }\n\n      break;\n\n    default:\n      return state;\n      break;\n  }\n};\n\nconst orders = [];\nexport const OrderData = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : orders;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(action.payload);\n\n  switch (action.type) {\n    case \"ORDERDATA\":\n      return { ...state,\n        orders: [...state.orders, action.payload]\n      };\n\n    default:\n      return state;\n      break;\n  }\n};\n_c = OrderData;\nexport default handleCart;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderData\");","map":{"version":3,"sources":["/home/wv/Desktop/GitRepos/Ecommerce/React-Redux-E_commerce/src/redux/action.js/reducer/handleCart.js"],"names":["OrderHistory","cart","handleCart","state","action","product","payload","type","exist","find","x","id","map","qty","exit1","filter","exit2","orders","OrderData","console","log"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iCAAzB;AAEA,MAAMC,IAAI,GAAG,EAAb;;AACA,MAAMC,UAAU,GAAG,YAA0B;AAAA,MAAzBC,KAAyB,uEAAjBF,IAAiB;AAAA,MAAXG,MAAW;AAC3C,QAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAK,SAAL;AACE,YAAMC,KAAK,GAAGL,KAAK,CAACM,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,OAAO,CAACM,EAAnC,CAAd;;AACA,UAAIH,KAAJ,EAAW;AACT,eAAOL,KAAK,CAACS,GAAN,CAAWF,CAAD,IACfA,CAAC,CAACC,EAAF,KAASN,OAAO,CAACM,EAAjB,GAAsB,EAAE,GAAGD,CAAL;AAAQG,UAAAA,GAAG,EAAEH,CAAC,CAACG,GAAF,GAAQ;AAArB,SAAtB,GAAiDH,CAD5C,CAAP;AAGD,OAJD,MAIO;AACL,cAAML,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,eAAO,CAAC,GAAGH,KAAJ,EAAW,EAAE,GAAGE,OAAL;AAAcQ,UAAAA,GAAG,EAAE;AAAnB,SAAX,CAAP;AACD;;AAED;;AACF,SAAK,SAAL;AACE,YAAMC,KAAK,GAAGX,KAAK,CAACM,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,OAAO,CAACM,EAAnC,CAAd;;AACA,UAAIG,KAAK,CAACD,GAAN,KAAc,CAAlB,EAAqB;AACnB,eAAOV,KAAK,CAACY,MAAN,CAAcL,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASG,KAAK,CAACH,EAAnC,CAAP;AACD,OAFD,MAEO;AACL,eAAOR,KAAK,CAACS,GAAN,CAAWF,CAAD,IACfA,CAAC,CAACC,EAAF,KAASN,OAAO,CAACM,EAAjB,GAAsB,EAAE,GAAGD,CAAL;AAAQG,UAAAA,GAAG,EAAEH,CAAC,CAACG,GAAF,GAAQ;AAArB,SAAtB,GAAiDH,CAD5C,CAAP;AAGD;;AACD;;AACF,SAAK,gBAAL;AACE,YAAMM,KAAK,GAAGb,KAAK,CAACM,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,OAAO,CAACM,EAAnC,CAAd;;AACA,UAAIK,KAAJ,EAAW;AACT,eAAOb,KAAK,CAACY,MAAN,CAAcL,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASK,KAAK,CAACL,EAAnC,CAAP;AACD;;AACD;;AACF;AACE,aAAOR,KAAP;AACA;AA/BJ;AAiCD,CAnCD;;AAqCA,MAAMc,MAAM,GAAG,EAAf;AACA,OAAO,MAAMC,SAAS,GAAG,YAA4B;AAAA,MAA3Bf,KAA2B,uEAAnBc,MAAmB;AAAA,MAAXb,MAAW;AACnDe,EAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAM,CAACE,OAAnB;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELc,QAAAA,MAAM,EAAE,CAAC,GAAGd,KAAK,CAACc,MAAV,EAAkBb,MAAM,CAACE,OAAzB;AAFH,OAAP;;AAKF;AACE,aAAOH,KAAP;AACA;AATJ;AAWD,CAbM;KAAMe,S;AAcb,eAAehB,UAAf","sourcesContent":["import OrderHistory from \"../../../Component/OrderHistory\";\n\nconst cart = [];\nconst handleCart = (state = cart, action) => {\n  const product = action.payload;\n  switch (action.type) {\n    case \"ADDITEM\":\n      const exist = state.find((x) => x.id === product.id);\n      if (exist) {\n        return state.map((x) =>\n          x.id === product.id ? { ...x, qty: x.qty + 1 } : x\n        );\n      } else {\n        const product = action.payload;\n        return [...state, { ...product, qty: 1 }];\n      }\n\n      break;\n    case \"DELITEM\":\n      const exit1 = state.find((x) => x.id === product.id);\n      if (exit1.qty === 1) {\n        return state.filter((x) => x.id !== exit1.id);\n      } else {\n        return state.map((x) =>\n          x.id === product.id ? { ...x, qty: x.qty - 1 } : x\n        );\n      }\n      break;\n    case \"CARTDATADELETE\":\n      const exit2 = state.find((x) => x.id === product.id);\n      if (exit2) {\n        return state.filter((x) => x.id !== exit2.id);\n      }\n      break;\n    default:\n      return state;\n      break;\n  }\n};\n\nconst orders = [];\nexport const OrderData = (state = orders, action) => {\n  console.log(action.payload);\n  switch (action.type) {\n    case \"ORDERDATA\":\n      return {\n        ...state,\n        orders: [...state.orders, action.payload],\n      };\n\n    default:\n      return state;\n      break;\n  }\n};\nexport default handleCart;\n"]},"metadata":{},"sourceType":"module"}