{"ast":null,"code":"/*\n  autoMergeLevel1:\n    - merges 1 level of substate\n    - skips substate if already modified\n*/\nexport default function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {\n  let {\n    debug\n  } = _ref;\n  const newState = Object.assign({}, reducedState); // only rehydrate if inboundState exists and is an object\n\n  if (inboundState && typeof inboundState === 'object') {\n    const keys = Object.keys(inboundState);\n    keys.forEach(key => {\n      // ignore _persist data\n      if (key === '_persist') return; // if reducer modifies substate, skip auto rehydration\n\n      if (originalState[key] !== reducedState[key]) {\n        if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);\n        return;\n      } // otherwise hard set the new value\n\n\n      newState[key] = inboundState[key];\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production' && debug && inboundState && typeof inboundState === 'object') console.log(`reduxjs-toolkit-persist/stateReconciler: rehydrated keys '${Object.keys(inboundState).join(', ')}'`);\n  return newState;\n}","map":{"version":3,"sources":["/home/wv/Desktop/GitRepos/Ecommerce/React-Redux-E_commerce/node_modules/reduxjs-toolkit-persist/es/stateReconciler/autoMergeLevel1.js"],"names":["autoMergeLevel1","inboundState","originalState","reducedState","debug","newState","Object","assign","keys","forEach","key","process","env","NODE_ENV","console","log","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,eAAT,CAAyBC,YAAzB,EAAuCC,aAAvC,EAAsDC,YAAtD,QAA+E;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AAC1F,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,YAAlB,CAAjB,CAD0F,CAE1F;;AACA,MAAIF,YAAY,IAAI,OAAOA,YAAP,KAAwB,QAA5C,EAAsD;AAClD,UAAMO,IAAI,GAAGF,MAAM,CAACE,IAAP,CAAYP,YAAZ,CAAb;AACAO,IAAAA,IAAI,CAACC,OAAL,CAAaC,GAAG,IAAI;AAChB;AACA,UAAIA,GAAG,KAAK,UAAZ,EACI,OAHY,CAIhB;;AACA,UAAIR,aAAa,CAACQ,GAAD,CAAb,KAAuBP,YAAY,CAACO,GAAD,CAAvC,EAA8C;AAC1C,YAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCT,KAA7C,EACIU,OAAO,CAACC,GAAR,CAAY,qFAAZ,EAAmGL,GAAnG;AACJ;AACH,OATe,CAUhB;;;AACAL,MAAAA,QAAQ,CAACK,GAAD,CAAR,GAAgBT,YAAY,CAACS,GAAD,CAA5B;AACH,KAZD;AAaH;;AACD,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACAT,KADA,IAEAH,YAFA,IAGA,OAAOA,YAAP,KAAwB,QAH5B,EAIIa,OAAO,CAACC,GAAR,CAAa,6DAA4DT,MAAM,CAACE,IAAP,CAAYP,YAAZ,EAA0Be,IAA1B,CAA+B,IAA/B,CAAqC,GAA9G;AACJ,SAAOX,QAAP;AACH","sourcesContent":["/*\n  autoMergeLevel1:\n    - merges 1 level of substate\n    - skips substate if already modified\n*/\nexport default function autoMergeLevel1(inboundState, originalState, reducedState, { debug }) {\n    const newState = Object.assign({}, reducedState);\n    // only rehydrate if inboundState exists and is an object\n    if (inboundState && typeof inboundState === 'object') {\n        const keys = Object.keys(inboundState);\n        keys.forEach(key => {\n            // ignore _persist data\n            if (key === '_persist')\n                return;\n            // if reducer modifies substate, skip auto rehydration\n            if (originalState[key] !== reducedState[key]) {\n                if (process.env.NODE_ENV !== 'production' && debug)\n                    console.log('reduxjs-toolkit-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);\n                return;\n            }\n            // otherwise hard set the new value\n            newState[key] = inboundState[key];\n        });\n    }\n    if (process.env.NODE_ENV !== 'production' &&\n        debug &&\n        inboundState &&\n        typeof inboundState === 'object')\n        console.log(`reduxjs-toolkit-persist/stateReconciler: rehydrated keys '${Object.keys(inboundState).join(', ')}'`);\n    return newState;\n}\n"]},"metadata":{},"sourceType":"module"}