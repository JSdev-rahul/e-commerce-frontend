{"ast":null,"code":"import { KEY_PREFIX } from './constants';\nexport default function getStoredState(config) {\n  const transforms = config.transforms || [];\n  const storageKey = `${config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX}${config.key}`;\n  const storage = config.storage;\n  const debug = config.debug;\n  let deserialize;\n\n  if (config.deserialize === false) {\n    deserialize = x => x;\n  } else if (typeof config.deserialize === 'function') {\n    deserialize = config.deserialize;\n  } else {\n    deserialize = defaultDeserialize;\n  }\n\n  return storage.getItem(storageKey).then(serialized => {\n    if (!serialized) return undefined;else {\n      try {\n        const state = {};\n        const rawState = deserialize(serialized);\n        Object.keys(rawState).forEach(key => {\n          state[key] = transforms.reduceRight((subState, transformer) => {\n            return transformer.out(subState, key, rawState);\n          }, deserialize(rawState[key]));\n        });\n        return state;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production' && debug) console.log(`reduxjs-toolkit-persist/getStoredState: Error restoring data ${serialized}`, err);\n        throw err;\n      }\n    }\n  });\n}\n\nfunction defaultDeserialize(serial) {\n  return JSON.parse(serial);\n}","map":{"version":3,"sources":["/home/wv/Desktop/GitRepos/Ecommerce/React-Redux-E_commerce/node_modules/reduxjs-toolkit-persist/es/getStoredState.js"],"names":["KEY_PREFIX","getStoredState","config","transforms","storageKey","keyPrefix","undefined","key","storage","debug","deserialize","x","defaultDeserialize","getItem","then","serialized","state","rawState","Object","keys","forEach","reduceRight","subState","transformer","out","err","process","env","NODE_ENV","console","log","serial","JSON","parse"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,eAAe,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC3C,QAAMC,UAAU,GAAGD,MAAM,CAACC,UAAP,IAAqB,EAAxC;AACA,QAAMC,UAAU,GAAI,GAAEF,MAAM,CAACG,SAAP,KAAqBC,SAArB,GAAiCJ,MAAM,CAACG,SAAxC,GAAoDL,UAAW,GAAEE,MAAM,CAACK,GAAI,EAAlG;AACA,QAAMC,OAAO,GAAGN,MAAM,CAACM,OAAvB;AACA,QAAMC,KAAK,GAAGP,MAAM,CAACO,KAArB;AACA,MAAIC,WAAJ;;AACA,MAAIR,MAAM,CAACQ,WAAP,KAAuB,KAA3B,EAAkC;AAC9BA,IAAAA,WAAW,GAAIC,CAAD,IAAOA,CAArB;AACH,GAFD,MAGK,IAAI,OAAOT,MAAM,CAACQ,WAAd,KAA8B,UAAlC,EAA8C;AAC/CA,IAAAA,WAAW,GAAGR,MAAM,CAACQ,WAArB;AACH,GAFI,MAGA;AACDA,IAAAA,WAAW,GAAGE,kBAAd;AACH;;AACD,SAAOJ,OAAO,CAACK,OAAR,CAAgBT,UAAhB,EAA4BU,IAA5B,CAAkCC,UAAD,IAAgB;AACpD,QAAI,CAACA,UAAL,EACI,OAAOT,SAAP,CADJ,KAEK;AACD,UAAI;AACA,cAAMU,KAAK,GAAG,EAAd;AACA,cAAMC,QAAQ,GAAGP,WAAW,CAACK,UAAD,CAA5B;AACAG,QAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8Bb,GAAG,IAAI;AACjCS,UAAAA,KAAK,CAACT,GAAD,CAAL,GAAaJ,UAAU,CAACkB,WAAX,CAAuB,CAACC,QAAD,EAAWC,WAAX,KAA2B;AAC3D,mBAAOA,WAAW,CAACC,GAAZ,CAAgBF,QAAhB,EAA0Bf,GAA1B,EAA+BU,QAA/B,CAAP;AACH,WAFY,EAEVP,WAAW,CAACO,QAAQ,CAACV,GAAD,CAAT,CAFD,CAAb;AAGH,SAJD;AAKA,eAAOS,KAAP;AACH,OATD,CAUA,OAAOS,GAAP,EAAY;AACR,YAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCnB,KAA7C,EACIoB,OAAO,CAACC,GAAR,CAAa,gEAA+Df,UAAW,EAAvF,EAA0FU,GAA1F;AACJ,cAAMA,GAAN;AACH;AACJ;AACJ,GApBM,CAAP;AAqBH;;AACD,SAASb,kBAAT,CAA4BmB,MAA5B,EAAoC;AAChC,SAAOC,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAP;AACH","sourcesContent":["import { KEY_PREFIX } from './constants';\nexport default function getStoredState(config) {\n    const transforms = config.transforms || [];\n    const storageKey = `${config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX}${config.key}`;\n    const storage = config.storage;\n    const debug = config.debug;\n    let deserialize;\n    if (config.deserialize === false) {\n        deserialize = (x) => x;\n    }\n    else if (typeof config.deserialize === 'function') {\n        deserialize = config.deserialize;\n    }\n    else {\n        deserialize = defaultDeserialize;\n    }\n    return storage.getItem(storageKey).then((serialized) => {\n        if (!serialized)\n            return undefined;\n        else {\n            try {\n                const state = {};\n                const rawState = deserialize(serialized);\n                Object.keys(rawState).forEach(key => {\n                    state[key] = transforms.reduceRight((subState, transformer) => {\n                        return transformer.out(subState, key, rawState);\n                    }, deserialize(rawState[key]));\n                });\n                return state;\n            }\n            catch (err) {\n                if (process.env.NODE_ENV !== 'production' && debug)\n                    console.log(`reduxjs-toolkit-persist/getStoredState: Error restoring data ${serialized}`, err);\n                throw err;\n            }\n        }\n    });\n}\nfunction defaultDeserialize(serial) {\n    return JSON.parse(serial);\n}\n"]},"metadata":{},"sourceType":"module"}