{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEFAULT_VERSION } from './constants';\nexport default function createMigrate(migrations, config) {\n  const {\n    debug\n  } = config || {};\n  return function (state, currentVersion) {\n    if (!state) {\n      if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: no inbound state, skipping migration');\n      return Promise.resolve(undefined);\n    }\n\n    const inboundVersion = state._persist && state._persist.version !== undefined ? state._persist.version : DEFAULT_VERSION;\n\n    if (inboundVersion === currentVersion) {\n      if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: versions match, noop migration');\n      return Promise.resolve(state);\n    }\n\n    if (inboundVersion > currentVersion) {\n      if (process.env.NODE_ENV !== 'production') console.error('reduxjs-toolkit-persist: downgrading version is not supported');\n      return Promise.resolve(state);\n    }\n\n    const migrationKeys = Object.keys(migrations).map(ver => parseInt(ver)).filter(key => currentVersion >= key && key > inboundVersion).sort((a, b) => a - b);\n    if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: migrationKeys', migrationKeys);\n\n    try {\n      const migratedState = migrationKeys.reduce((state, versionKey) => {\n        if (process.env.NODE_ENV !== 'production' && debug) console.log('reduxjs-toolkit-persist: running migration for versionKey', versionKey);\n        return migrations[versionKey](state);\n      }, state);\n      return Promise.resolve(migratedState);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n}","map":{"version":3,"sources":["/home/wv/Desktop/GitRepos/Ecommerce/React-Redux-E_commerce/node_modules/reduxjs-toolkit-persist/es/createMigrate.js"],"names":["DEFAULT_VERSION","createMigrate","migrations","config","debug","state","currentVersion","process","env","NODE_ENV","console","log","Promise","resolve","undefined","inboundVersion","_persist","version","error","migrationKeys","Object","keys","map","ver","parseInt","filter","key","sort","a","b","migratedState","reduce","versionKey","err","reject"],"mappings":"AAAA;AACA,SAASA,eAAT,QAAgC,aAAhC;AACA,eAAe,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,MAAnC,EAA2C;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAYD,MAAM,IAAI,EAA5B;AACA,SAAO,UAAUE,KAAV,EAAiBC,cAAjB,EAAiC;AACpC,QAAI,CAACD,KAAL,EAAY;AACR,UAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCL,KAA7C,EACIM,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACJ,aAAOC,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAAP;AACH;;AACD,UAAMC,cAAc,GAAGV,KAAK,CAACW,QAAN,IAAkBX,KAAK,CAACW,QAAN,CAAeC,OAAf,KAA2BH,SAA7C,GACjBT,KAAK,CAACW,QAAN,CAAeC,OADE,GAEjBjB,eAFN;;AAGA,QAAIe,cAAc,KAAKT,cAAvB,EAAuC;AACnC,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCL,KAA7C,EACIM,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACJ,aAAOC,OAAO,CAACC,OAAR,CAAgBR,KAAhB,CAAP;AACH;;AACD,QAAIU,cAAc,GAAGT,cAArB,EAAqC;AACjC,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACIC,OAAO,CAACQ,KAAR,CAAc,+DAAd;AACJ,aAAON,OAAO,CAACC,OAAR,CAAgBR,KAAhB,CAAP;AACH;;AACD,UAAMc,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYnB,UAAZ,EACjBoB,GADiB,CACbC,GAAG,IAAIC,QAAQ,CAACD,GAAD,CADF,EAEjBE,MAFiB,CAEVC,GAAG,IAAIpB,cAAc,IAAIoB,GAAlB,IAAyBA,GAAG,GAAGX,cAF5B,EAGjBY,IAHiB,CAGZ,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHF,CAAtB;AAIA,QAAItB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCL,KAA7C,EACIM,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDQ,aAAtD;;AACJ,QAAI;AACA,YAAMW,aAAa,GAAGX,aAAa,CAACY,MAAd,CAAqB,CAAC1B,KAAD,EAAQ2B,UAAR,KAAuB;AAC9D,YAAIzB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCL,KAA7C,EACIM,OAAO,CAACC,GAAR,CAAY,2DAAZ,EAAyEqB,UAAzE;AACJ,eAAO9B,UAAU,CAAC8B,UAAD,CAAV,CAAuB3B,KAAvB,CAAP;AACH,OAJqB,EAInBA,KAJmB,CAAtB;AAKA,aAAOO,OAAO,CAACC,OAAR,CAAgBiB,aAAhB,CAAP;AACH,KAPD,CAQA,OAAOG,GAAP,EAAY;AACR,aAAOrB,OAAO,CAACsB,MAAR,CAAeD,GAAf,CAAP;AACH;AACJ,GApCD;AAqCH","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEFAULT_VERSION } from './constants';\nexport default function createMigrate(migrations, config) {\n    const { debug } = config || {};\n    return function (state, currentVersion) {\n        if (!state) {\n            if (process.env.NODE_ENV !== 'production' && debug)\n                console.log('reduxjs-toolkit-persist: no inbound state, skipping migration');\n            return Promise.resolve(undefined);\n        }\n        const inboundVersion = state._persist && state._persist.version !== undefined\n            ? state._persist.version\n            : DEFAULT_VERSION;\n        if (inboundVersion === currentVersion) {\n            if (process.env.NODE_ENV !== 'production' && debug)\n                console.log('reduxjs-toolkit-persist: versions match, noop migration');\n            return Promise.resolve(state);\n        }\n        if (inboundVersion > currentVersion) {\n            if (process.env.NODE_ENV !== 'production')\n                console.error('reduxjs-toolkit-persist: downgrading version is not supported');\n            return Promise.resolve(state);\n        }\n        const migrationKeys = Object.keys(migrations)\n            .map(ver => parseInt(ver))\n            .filter(key => currentVersion >= key && key > inboundVersion)\n            .sort((a, b) => a - b);\n        if (process.env.NODE_ENV !== 'production' && debug)\n            console.log('reduxjs-toolkit-persist: migrationKeys', migrationKeys);\n        try {\n            const migratedState = migrationKeys.reduce((state, versionKey) => {\n                if (process.env.NODE_ENV !== 'production' && debug)\n                    console.log('reduxjs-toolkit-persist: running migration for versionKey', versionKey);\n                return migrations[versionKey](state);\n            }, state);\n            return Promise.resolve(migratedState);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}